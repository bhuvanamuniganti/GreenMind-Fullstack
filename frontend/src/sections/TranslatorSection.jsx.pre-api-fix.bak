import { useState, useRef } from "react";
import { API_BASE } from '../api';

export default function TranslatorSection() {
  const [text, setText] = useState("");
  const [translated, setTranslated] = useState("");
  const [lang, setLang] = useState("Hindi");
  const [loading, setLoading] = useState(false);
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState(null);

  const audioRef = useRef(null);

  // === API Calls ===
  const callAPI = async (endpoint, setter) => {
    if (file && endpoint === "analyze") {
      const formData = new FormData();
      formData.append("file", file);

      const res = await fetch(
        `${process.env.REACT_APP_API_URL || `${API_BASE}`}/api/learning/analyze`,
        {
          method: "POST",
          body: formData,
        }
      );
      const data = await res.json();
      setText(data.result);
    } else {
      const res = await fetch(
        `${process.env.REACT_APP_API_URL || `${API_BASE}`}/api/learning/${endpoint}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text, targetLang: lang }),
        }
      );
      const data = await res.json();
      setter(data.result);
    }
  };

  // === Translate ===
  const handleTranslate = async () => {
    setLoading(true);
    await callAPI("translate", setTranslated);
    setLoading(false);
  };

  // === Play Audio ===
  const playAudio = async (content) => {
    try {
      const res = await fetch(
        `${process.env.REACT_APP_API_URL || `${API_BASE}`}/api/learning/tts`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text: content }),
        }
      );

      const blob = await res.blob();
      const url = URL.createObjectURL(blob);

      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }

      audioRef.current = new Audio(url);
      audioRef.current.play();
    } catch (err) {
      console.error("Audio play error:", err);
    }
  };

  // === Pause Audio ===
  const pauseAudio = () => {
    if (audioRef.current) {
      audioRef.current.pause();
    }
  };

  // === Stop Audio ===
  const stopAudio = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
    }
  };

  // === Download Audio ===
  const downloadAudio = async (content, filename) => {
    try {
      const res = await fetch(
        `${process.env.REACT_APP_API_URL || `${API_BASE}`}/api/learning/tts`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text: content }),
        }
      );

      const blob = await res.blob();
      const url = URL.createObjectURL(blob);

      const link = document.createElement("a");
      link.href = url;
      link.download = filename || "tts_audio.mp3";
      link.click();

      URL.revokeObjectURL(url);
    } catch (err) {
      console.error("Audio download error:", err);
    }
  };

  // === Clear All ===
  const clearAll = () => {
    setText("");
    setFile(null);
    setPreview(null);
    setTranslated("");
  };

  return (
    <div className="translator-container">
      <h2 className="translator-title">🌍 AI Translator</h2>

      {/* Input Area */}
      <textarea
        className="translator-textarea"
        rows="6"
        placeholder="Paste text here or upload an image..."
        value={text}
        onChange={(e) => setText(e.target.value)}
      />

      {/* File Upload + Buttons */}
      <div style={{ margin: "10px 0", display: "flex", gap: "12px", alignItems: "center" }}>
        <label className="translator-btn primary">
          📂 Choose Image
          <input
            type="file"
            accept="image/*"
            style={{ display: "none" }}
            onChange={(e) => {
              const selectedFile = e.target.files[0];
              setFile(selectedFile);
              setPreview(URL.createObjectURL(selectedFile));
            }}
          />
        </label>

        <button onClick={() => callAPI("analyze", setText)} className="translator-btn secondary">
          📸 Analyze
        </button>

        <button onClick={clearAll} className="translator-btn danger" style={{ backgroundColor: "Red", color: "White" }}>
          ❌ Clear
        </button>
      </div>

      {/* Image Preview with Close Button */}
      {preview && (
        <div style={{ position: "relative", display: "inline-block", marginBottom: "10px" }}>
          <img
            src={preview}
            alt="preview"
            style={{ maxWidth: "150px", maxHeight: "100px", borderRadius: "6px" }}
          />
          <button
            onClick={() => {
              setFile(null);
              setPreview(null);
            }}
            style={{
              position: "absolute",
              top: "-8px",
              right: "-8px",
              background: "red",
              color: "white",
              border: "none",
              borderRadius: "50%",
              width: "22px",
              height: "22px",
              cursor: "pointer",
              fontWeight: "bold",
            }}
          >
            ✖
          </button>
        </div>
      )}

      {/* English Audio Always Available */}
      {text && (
        <div className="translator-output">
          <h4>📝 English Input:</h4>
          <p>{text}</p>
          <div>
            <button onClick={() => playAudio(text)} className="translator-btn secondary">▶️ Play</button>
            <button onClick={pauseAudio} className="translator-btn secondary" style={{ backgroundColor: "#ff9800" }}>⏸ Pause</button>
            <button onClick={stopAudio} className="translator-btn secondary" style={{ backgroundColor: "#f44336" }}>⏹ Stop</button>
            <button onClick={() => downloadAudio(text, "English_audio.mp3")} className="translator-btn download">⬇️ Download</button>
          </div>
        </div>
      )}

      {/* Language Dropdown */}
      <div className="translator-controls">
        <label className="translator-label">Select Language:</label>
        <select className="translator-select" value={lang} onChange={(e) => setLang(e.target.value)}>
          <option value="Hindi">Hindi</option>
          <option value="Telugu">Telugu</option>
          <option value="Tamil">Tamil</option>
          <option value="Kannada">Kannada</option>
          <option value="Malayalam">Malayalam</option>
        </select>
      </div>

      {/* Translate Button */}
      <button onClick={handleTranslate} className="translator-btn primary" disabled={loading}>
        {loading ? "Translating..." : "Translate"}
      </button>

      {/* Translated Output */}
      {translated && (
        <div className="translator-output">
          <h4>🔄 Translated Output ({lang}):</h4>
          <p>{translated}</p>
          <div>
            <button onClick={() => playAudio(translated)} className="translator-btn secondary">▶️ Play</button>
            <button onClick={pauseAudio} className="translator-btn secondary" style={{ backgroundColor: "#ff9800" }}>⏸ Pause</button>
            <button onClick={stopAudio} className="translator-btn secondary" style={{ backgroundColor: "#f44336" }}>⏹ Stop</button>
            <button onClick={() => downloadAudio(translated, `${lang}_translation.mp3`)} className="translator-btn download">⬇️ Download</button>
          </div>
        </div>
      )}
    </div>
  );
}

